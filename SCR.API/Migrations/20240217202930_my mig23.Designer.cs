// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCR.API.Data;

#nullable disable

namespace SCR.API.Migrations
{
    [DbContext(typeof(SCRDbContext))]
    [Migration("20240217202930_my mig23")]
    partial class mymig23
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SCR.API.Models.Domain.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Bookmark", b =>
                {
                    b.Property<int>("StdId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("StdId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"));

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Comment", b =>
                {
                    b.Property<int>("StdId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StdId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StdId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId");

                    b.HasIndex("StdId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("StudentId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Rate", b =>
                {
                    b.Property<int>("StdId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.HasKey("StdId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Report", b =>
                {
                    b.Property<int>("StdId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StdId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Student", b =>
                {
                    b.Property<int>("StdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StdId"));

                    b.Property<string>("EsuInst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StdUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StdId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.SubCat", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("SubjectId", "CatId");

                    b.HasIndex("CatId");

                    b.ToTable("SubCats");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Bookmark", b =>
                {
                    b.HasOne("SCR.API.Models.Domain.Material", "Material")
                        .WithMany("Bookmarks")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SCR.API.Models.Domain.Student", "Student")
                        .WithMany("Bookmarks")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Comment", b =>
                {
                    b.HasOne("SCR.API.Models.Domain.Material", "Material")
                        .WithMany("Comments")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCR.API.Models.Domain.Student", "Student")
                        .WithMany("Comments")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Material", b =>
                {
                    b.HasOne("SCR.API.Models.Domain.Student", "Student")
                        .WithMany("Materials")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCR.API.Models.Domain.Subject", "Subject")
                        .WithMany("Materials")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Notification", b =>
                {
                    b.HasOne("SCR.API.Models.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SCR.API.Models.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Rate", b =>
                {
                    b.HasOne("SCR.API.Models.Domain.Material", "Material")
                        .WithMany("Rates")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCR.API.Models.Domain.Student", "Student")
                        .WithMany("Rates")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Report", b =>
                {
                    b.HasOne("SCR.API.Models.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCR.API.Models.Domain.Student", "Student")
                        .WithMany("Reports")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.SubCat", b =>
                {
                    b.HasOne("SCR.API.Models.Domain.Category", "Category")
                        .WithMany("SubCats")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCR.API.Models.Domain.Subject", "Subject")
                        .WithMany("SubCats")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Category", b =>
                {
                    b.Navigation("SubCats");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Material", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Student", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Materials");

                    b.Navigation("Rates");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SCR.API.Models.Domain.Subject", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("SubCats");
                });
#pragma warning restore 612, 618
        }
    }
}
